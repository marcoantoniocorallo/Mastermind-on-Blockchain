Future Works:
- punished users in a black_list: infatti una possibile strategia di attacco potrebbe essere quella di 
  iniziare partite con utenti, fargli spendere il gas per delle transazioni e poi andare AFK prima 
  di mettere lo stake. Questo vorrebbe dire che il giocatore onesto viene sì rimborsato, ma ha speso il gas 
  senza vincere nulla.
- minimizzare ulteriormente il gas 
- Feature che permette di trovare partite già create e designate a te
- items on localstorage cifrati 

TODO: 
- Vulnerability Analysis

##########################################################
npx hardhat node
Started HTTP and WebSocket JSON-RPC server at http://127.0.0.1:8545/

Account #0: 0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266 (10000 ETH)
Private Key: 0xac0974bec39a17e36ba4a6b4d238ff944bacb478cbed5efcae784d7bf4f2ff80

Account #1: 0x70997970C51812dc3A010C7d01b50e0d17dc79C8 (10000 ETH)
Private Key: 0x59c6995e998f97a5a0044966f0945389dc9e86dae88c7a8412f4603b6b78690d

Account #2: 0x3C44CdDdB6a900fa2b585dd299e03d12FA4293BC (10000 ETH)
Private Key: 0x5de4111afa1a4b94908f83103eb1f1706367c2e68ca870fc3fb9a804cdab365a

Account #3: 0x90F79bf6EB2c4f870365E785982E1f101E93b906 (10000 ETH)
Private Key: 0x7c852118294e51e653712a81e05800f419141751be58f605c371e15141b007a6

Account #4: 0x15d34AAf54267DB7D7c367839AAf71A00a2C6A65 (10000 ETH)
Private Key: 0x47e179ec197488593b187f80a00eb0da91f1b9d0b13f8733639f19c30a34926a

Account #5: 0x9965507D1a55bcC2695C58ba16FB37d819B0A4dc (10000 ETH)
Private Key: 0x8b3a350cf5c34c9194ca85829a2df0ec3153be0318b5e2d3348e872092edffba

Account #6: 0x976EA74026E726554dB657fA54763abd0C3a0aa9 (10000 ETH)
Private Key: 0x92db14e403b83dfe3df233f83dfa3a0d7096f21ca9b0d6d6b8d88b2b4ec1564e

Account #7: 0x14dC79964da2C08b23698B3D3cc7Ca32193d9955 (10000 ETH)
Private Key: 0x4bbbf85ce3377467afe5d46f804f221813b2bb87f24d81f60f1fcdbf7cbf4356

Account #8: 0x23618e81E3f5cdF7f54C3d65f7FBc0aBf5B21E8f (10000 ETH)
Private Key: 0xdbda1821b80551c9d65939329250298aa3472ba22feea921c0cf5d620ea67b97

Account #9: 0xa0Ee7A142d267C1f36714E4a8F75612F20a79720 (10000 ETH)
Private Key: 0x2a871d0798f97d79848a013d4936a73bf4cc922c825d33c1cf7073dff6d409c6

Account #10: 0xBcd4042DE499D14e55001CcbB24a551F3b954096 (10000 ETH)
Private Key: 0xf214f2b2cd398c806f84e317254e0f0b801d0643303237d97a22a48e01628897

Account #11: 0x71bE63f3384f5fb98995898A86B02Fb2426c5788 (10000 ETH)
Private Key: 0x701b615bbdfb9de65240bc28bd21bbc0d996645a3dd57e7b12bc2bdf6f192c82

Account #12: 0xFABB0ac9d68B0B445fB7357272Ff202C5651694a (10000 ETH)
Private Key: 0xa267530f49f8280200edf313ee7af6b827f2a8bce2897751d06a843f644967b1

Account #13: 0x1CBd3b2770909D4e10f157cABC84C7264073C9Ec (10000 ETH)
Private Key: 0x47c99abed3324a2707c28affff1267e45918ec8c3f20b8aa892e8b065d2942dd

Account #14: 0xdF3e18d64BC6A983f673Ab319CCaE4f1a57C7097 (10000 ETH)
Private Key: 0xc526ee95bf44d8fc405a158bb884d9d1238d99f0612e9f33d006bb0789009aaa

Account #15: 0xcd3B766CCDd6AE721141F452C550Ca635964ce71 (10000 ETH)
Private Key: 0x8166f546bab6da521a8369cab06c5d2b9e46670292d85c875ee9ec20e84ffb61

Account #16: 0x2546BcD3c84621e976D8185a91A922aE77ECEc30 (10000 ETH)
Private Key: 0xea6c44ac03bff858b476bba40716402b03e41b8e97e276d1baec7c37d42484a0

Account #17: 0xbDA5747bFD65F08deb54cb465eB87D40e51B197E (10000 ETH)
Private Key: 0x689af8efa8c651a91ad287602527f3af2fe9f6501a7ac4b061667b5a93e037fd

Account #18: 0xdD2FD4581271e230360230F9337D5c0430Bf44C0 (10000 ETH)
Private Key: 0xde9be858da4a475276426320d5e9262ecfc3ba460bfac56360bfa6c4c28b4ee0

Account #19: 0x8626f6940E2eb28930eFb4CeF49B2d1F2C9C1199 (10000 ETH)
Private Key: 0xdf57089febbacf7ba0bc227dafbffa9fc08a93fdc68e1e42411a14efcf23656e

##########################################################
Front-end: npx create-react-app client
npm install react-router-dom
npm install react-bootstrap bootstrap
npm i @metamask/sdk

deploy on live: 
  npx hardhat ignition deploy ./ignition/modules/MasterMind.js --network <network-name>

API key saved in hardhat vars

- Gas Analysis: 
2406282977195962 // codebreaker
2239529392717676 // codemaker 
2322906184956819 // mean 

npm install --save-dev hardhat-gas-reporter
·············································································································
|  Solidity and Network Configuration                                                                       │
························|·················|···············|·················|································
|  Solidity: 0.8.27     ·  Optim: true    ·  Runs: 200    ·  viaIR: false   ·     Block: 30,000,000 gas     │
························|·················|···············|·················|································
|  Network: ETHEREUM    ·  L1: 19 gwei                    ·                 ·        3296.47 eur/eth        │
························|·················|···············|·················|················|···············
|  Contracts / Methods  ·  Min            ·  Max          ·  Avg            ·  # calls       ·  eur (avg)   │
························|·················|···············|·················|················|···············
|  MasterMind           ·                                                                                   │
························|·················|···············|·················|················|···············
|      AFK              ·         63,914  ·       85,516  ·         66,055  ·           152  ·        4.14  │
························|·················|···············|·················|················|···············
|      claimStakeByAFK  ·        180,375  ·      218,772  ·        203,290  ·            12  ·       12.73  │
························|·················|···············|·················|················|···············
|      declareStake     ·         73,191  ·      185,252  ·         89,837  ·           175  ·        5.63  │
························|·················|···············|·················|················|···············
|      joinGame         ·              -  ·            -  ·        102,479  ·           101  ·        6.42  │
························|·················|···············|·················|················|···············
|      joinGame         ·         50,859  ·       50,871  ·         50,865  ·             4  ·        3.19  │
························|·················|···············|·················|················|···············
|      leaveGame        ·        188,816  ·      205,122  ·        198,546  ·            21  ·       12.44  │
························|·················|···············|·················|················|···············
|      newGame          ·        124,928  ·      147,628  ·        125,751  ·           124  ·        7.88  │
························|·················|···············|·················|················|···············
|      newGame          ·        120,681  ·      123,481  ·        121,618  ·             6  ·        7.62  │
························|·················|···············|·················|················|···············
|      prepareGame      ·         82,036  ·       92,308  ·         84,892  ·           140  ·        5.32  │
························|·················|···············|·················|················|···············
|      sendCode         ·         40,205  ·       61,920  ·         52,298  ·            76  ·        3.28  │
························|·················|···············|·················|················|···············
|      sendFeedback     ·         61,722  ·       63,549  ·         62,012  ·           404  ·        3.88  │
························|·················|···············|·················|················|···············
|      sendGuess        ·         77,286  ·       79,111  ·         77,534  ·           466  ·        4.86  │
························|·················|···············|·················|················|···············
|      startDispute     ·        248,293  ·      252,384  ·        250,033  ·            14  ·       15.66  │
························|·················|···············|·················|················|···············
|      submitSolution   ·         71,506  ·      108,791  ·         86,927  ·            54  ·        5.44  │
························|·················|···············|·················|················|···············
|      updateScore      ·         65,787  ·      364,608  ·        179,120  ·            48  ·       11.22  │
························|·················|···············|·················|················|···············
|  Deployments                            ·                                 ·  % of limit    ·              │
························|·················|···············|·················|················|···············
|  MasterMind           ·              -  ·            -  ·      3,477,541  ·        11.6 %  ·      217.81  │
························|·················|···············|·················|················|···············
note: it depends on gasprice, it changes (fetched from live networks!)


Test Coverage: npx hardhat coverage
-----------------|----------|----------|----------|----------|----------------|
File             |  % Stmts | % Branch |  % Funcs |  % Lines |Uncovered Lines |
-----------------|----------|----------|----------|----------|----------------|
 contracts/      |      100 |    80.43 |      100 |      100 |                |
  Constants.sol  |      100 |      100 |      100 |      100 |                |
  Events.sol     |      100 |      100 |      100 |      100 |                |
  Game.sol       |      100 |       80 |      100 |      100 |                |
  MasterMind.sol |      100 |    80.68 |      100 |      100 |                |
  Utils.sol      |      100 |      100 |      100 |      100 |                |
-----------------|----------|----------|----------|----------|----------------|
All files        |      100 |    80.43 |      100 |      100 |                |
-----------------|----------|----------|----------|----------|----------------|
> Istanbul reports written to ./coverage/ and ./coverage.json

Test manuali sulla GUI per ogni fase di gioco, considerando casi critici ed eventuali rimborsi.
Casistica di rimborso presente su etherscan, transazione numero 0xf582f2e87cc6b2cdde113d40c2a1970b998941a10118b3f0b16db2f665c4180c

Prevented Security issues:
- DDOS creating new game:
  Eve wants to DDOS the game vectors creating a sequence of new games.
  1. The gas makes his work in preventing it.
  2. Furthermore, once a player creates a game, he cannot create any others.
- Make an user not available to play:
  If P1 creates a game for playing with P2, P2 is not forced to play with P1 and may want to play 
  with someone else or to play a quick game (random chosen).
- Per il problema della randomness è stato utililzzato l'hashblock del blocco precedente,
  come visto a lezione. Non è la soluzione migliore ma la migliore gratis
- Access control: il contratto Game memorizza l'indirizzo del contratto MasterMind e permette
  operazioni sensibili (settaggi) solo provenienti da quell'indirizzo (?)
  Game effettua anche i controlli sull'indirizzo di chi inizia la transazione, per verificare
  che sia codemaker o codebreaker, a seconda del turno
- Reentrancy: Lo stake viene settato a 0 prima di essere restituito dal metodo, inoltre viene 
  usata la funzione call settando il gas a 3500: abbastanza per inviare i soldi ma non abbastanza
  per inviarli due volte
- Bruteforce sul codice: salt 
- Integer overflow sull'id delle partite: utilizzato un uint256 => 2^256 numero improponibile di partite
  Si potrebbe aggiungere un controllo t.c. ogni ~mln di partite resetta l'id, ragionevole come quantità
  ma spreca gas inutilmente dato che 2^256 chissà se e quando verrà raggiunto

Design choices:
- Stake deciso off-chain, poi trasmesso come messaggio al contratto da entrambi i giocatori.
  Se i due stakes non coincidono, è probabile che uno dei due voglia barare, ma noon sappiamo chi.
  Per evitare queste situazioni, la partita viene chiusa (poco male dato che non era ancora iniziata)...
  Se i due stakes coincidono, vengono inviati. Se i soldi inviati da uno dei due non coincidono con
  quanto dichiarato, il player viene punito
- Punishment: lo stake viene dato all'altro giocatore (o me lo tengo io? :D) 
- id del game salvato off-chain sul client, inviato dal client per ogni operazione. 
  Il contratto fa dei controlli quando riceve una transazione con un dato id.
  Alternative erano mappare address => game, in modo da accedere alla partita di un giocatore
  direttamente tramite l'address, senza controllare l'ID. Ma questa soluzione avrebbe portato 
  a gestire una complessità maggiore in altri casi: uno su tutti, joinGame(ID) richiede di 
  accedere ad un game tramite il suo ID, dunque (data la struttura mapping di solidity) 
  si sarebbe comunque dovuto tenere un mapping id => game.
  Un'altra soluzione sarebbe appunto tenere entrambi i mapping, ma a quel punto un gioco è 
  accessibile tramite ID e il punto di debolezza continua ad esistere.
  Infine, un'ultima soluzione sarebbe quella di usare una struct che wrappa il vettore di games
  e che permette l'accesso al mapping address => game in modo publico e al mapping id => game 
  solo tramite apposite funzioni (ad es. quando si vuole fare una joinGame).
  Tuttavia questa soluzione aggiunge costi e complessità e si è preferito mantenere una struttura
  più semplice.
- security by design and by contract
- Game contract vs Game as struct: l'intero progetto è stato pensato e sviluppato in ottica OOP,
  usando un contratto Game per permettere i benefici della OOP (decoupling, ...), semplificare 
  lo sviluppo e migliorare la mantenibilità del codice. Una volta compreso il costo aggiuntivo di 
  trattare una chiamata indiretta ad un altro contratto, è stato effettuato un refactory che utilizza
  invece una libreria con una struttura dati, lasciando invariato il comportamento del contratto 
  MasterMind che si interfaccia tramite i metodi forniti dalla liberia.
- ^ --- => MasterMind funge il ruolo "centralizzato" di orchestratore di partite, 
  con cui i giocatori si interfacciano nell'invio di dati e soldi. Le informazioni e le operazioni 
  vengono poi delegate al contratto Game corrispondete
- Cheat: revert o punish tentativi di imbroglio? I.e.:
  - un giocatore tenta di modificare l'hash prima del termine della partita 
  - il codemaker sottomette una soluzione che non matcha l'hash inviato inizialmente
  - un giocatore dichiara uno stake e ne vesa un altro
  :
  La mia idea è che questi tentativi vengono annullati tramite una revert: sarebbe oltretutto
  sciocco tentare di barare in questo modo, infatti il sistema rivelerebbe facilmente una combinazione
  diversa (tramite il calcolo dell'hash) e il giocatore andrebbe incontro a punizione sicura.
  L'unico modo che ha il giocatore per barare è facendo leva sui punti che il contratto non verifica:
  dare feedback sbagliati. In questo caso il codemaker deve sperare che il codebreaker non se ne accorga
  altrimenti inizierebbe una disputa che non può vincere.
  Questo, d'altronde, gestisce implicitamente la possibilità che il codemaker sbagli (ad es. il salt)
  NOTA: immagino il capitolo che inizia con "To revert or to punish? That's the question."
  nota: questa scelta permette anche sviluppo e manutenzione più semplice
- le variabili del FE sono scritte in localstorage nella forma account_var; in questo modo si può 
  gestire il multi-wallet (?); questo naturalmente potrebbe dare problemi con l'event listener

Secret code and Salt: 
  - The secret code is composed by 4 colors/numbers chosen in a range of 6 colors/numbers, 
    that are 6^4 combinations ~ 1296.
  - The salt are 5 uint8 numbers, that are 256^5 ~ 1099511627776
  - The possible combinations to hash are thus 1296 * 1099511627776 and it's uncrackable

Local hash:     0xafd74d6a0e88884ce025c36627d3882e071e0ad515c6dfd73789910c65cdebc1
EtherScan hash: 0x51b19b8f57c4e33402c4d2ad074173967df35de43483471651964c42263c4749