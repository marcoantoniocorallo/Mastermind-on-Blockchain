Front-end: npx create-react-app client
// npm i @metamask/sdk-react
npm i @metamask/sdk

deploy on live: 
  npx hardhat ignition deploy ./ignition/modules/MasterMind.js --network <network-name>

API key saved in hardhat vars

- Gas Analysis: 
2406282977195962 // codebreaker
2239529392717676 // codemaker 
2322906184956819 // mean 

npm install --save-dev hardhat-gas-reporter
·············································································································
|  Solidity and Network Configuration                                                                       │
························|·················|···············|·················|································
|  Solidity: 0.8.27     ·  Optim: true    ·  Runs: 200    ·  viaIR: false   ·     Block: 30,000,000 gas     │
························|·················|···············|·················|································
|  Network: ETHEREUM    ·  L1: 13 gwei                    ·                 ·        2458.60 eur/eth        │
························|·················|···············|·················|················|···············
|  Contracts / Methods  ·  Min            ·  Max          ·  Avg            ·  # calls       ·  eur (avg)   │
························|·················|···············|·················|················|···············
|  MasterMind           ·                                                                                   │
························|·················|···············|·················|················|···············
|      AFK              ·         63,797  ·       85,399  ·         65,938  ·           152  ·        2.11  │
························|·················|···············|·················|················|···············
|      claimStakeByAFK  ·        180,297  ·      218,527  ·        203,072  ·            12  ·        6.49  │
························|·················|···············|·················|················|···············
|      declareStake     ·         72,804  ·      184,765  ·         89,636  ·           159  ·        2.86  │
························|·················|···············|·················|················|···············
|      joinGame         ·              -  ·            -  ·        102,262  ·            91  ·        3.27  │
························|·················|···············|·················|················|···············
|      joinGame         ·         50,678  ·       50,690  ·         50,684  ·             4  ·        1.62  │
························|·················|···············|·················|················|···············
|      newGame          ·        124,704  ·      147,404  ·        125,631  ·           110  ·        4.02  │
························|·················|···············|·················|················|···············
|      newGame          ·        120,457  ·      123,257  ·        121,394  ·             6  ·        3.88  │
························|·················|···············|·················|················|···············
|      prepareGame      ·         81,647  ·       90,427  ·         83,936  ·           126  ·        2.68  │
························|·················|···············|·················|················|···············
|      sendCode         ·         39,809  ·       60,136  ·         51,865  ·            76  ·        1.66  │
························|·················|···············|·················|················|···············
|      sendFeedback     ·         61,327  ·       61,766  ·         61,404  ·           404  ·        1.96  │
························|·················|···············|·················|················|···············
|      sendGuess        ·         76,957  ·       77,394  ·         77,021  ·           466  ·        2.46  │
························|·················|···············|·················|················|···············
|      startDispute     ·        247,755  ·      251,846  ·        249,495  ·            14  ·        7.97  │
························|·················|···············|·················|················|···············
|      submitSolution   ·         69,819  ·      108,492  ·         86,422  ·            54  ·        2.76  │
························|·················|···············|·················|················|···············
|      updateScore      ·         63,321  ·      364,001  ·        177,553  ·            48  ·        5.67  │
························|·················|···············|·················|················|···············
|  Deployments                            ·                                 ·  % of limit    ·              │
························|·················|···············|·················|················|···············
|  GameLib              ·              -  ·            -  ·      2,162,212  ·         7.2 %  ·       69.11  │
························|·················|···············|·················|················|···············
|  MasterMind           ·              -  ·            -  ·      2,944,167  ·         9.8 %  ·       94.10  │
························|·················|···············|·················|················|···············
|  Key                                                                                                      │
·············································································································
|  ◯  Execution gas for this method does not include intrinsic gas overhead                                 │
·············································································································
|  △  Cost was non-zero but below the precision setting for the currency display (see options)              │
·············································································································
|  Toolchain:  hardhat                                                                                      │
·············································································································

note: it depends on gasprice, here are 13gwei but it changes (fetched from live networks!)

- Vulnerability Analysis


Future Works:
- punished users in a black_list: infatti una possibile strategia di attacco potrebbe essere quella di 
  iniziare partite con utenti, fargli spendere il gas per delle transazioni e poi andare AFK prima 
  di mettere lo stake. Questo vorrebbe dire che il giocatore onesto viene sì rimborsato, ma ha speso il gas 
  senza vincere nulla.



Test Coverage: npx hardhat coverage
-----------------|----------|----------|----------|----------|----------------|
 contracts/      |      100 |     80.2 |      100 |      100 |                |
  Constants.sol  |      100 |      100 |      100 |      100 |                |
  Events.sol     |      100 |      100 |      100 |      100 |                |
  Game.sol       |      100 |       80 |      100 |      100 |                |
  MasterMind.sol |      100 |       80 |      100 |      100 |                |
  Utils.sol      |      100 |      100 |      100 |      100 |                |
-----------------|----------|----------|----------|----------|----------------|
All files        |      100 |     80.2 |      100 |      100 |                |
-----------------|----------|----------|----------|----------|----------------|
> Istanbul reports written to ./coverage/ and ./coverage.json

Prevented Security issues:
- DDOS creating new game:
  Eve wants to DDOS the game vectors creating a sequence of new games.
  1. The gas makes his work in preventing it.
  2. Furthermore, once a player creates a game, he cannot create any others.
- Make an user not available to play:
  If P1 creates a game for playing with P2, P2 is not forced to play with P1 and may want to play 
  with someone else or to play a quick game (random chosen).
- Per il problema della randomness è stato utililzzato l'hashblock del blocco precedente,
  come visto a lezione. Non è la soluzione migliore ma la migliore gratis
- Access control: il contratto Game memorizza l'indirizzo del contratto MasterMind e permette
  operazioni sensibili (settaggi) solo provenienti da quell'indirizzo (?)
  Game effettua anche i controlli sull'indirizzo di chi inizia la transazione, per verificare
  che sia codemaker o codebreaker, a seconda del turno
- Reentrancy: Lo stake viene settato a 0 prima di essere restituito dal metodo, inoltre viene 
  usata la funzione call settando il gas a 3500: abbastanza per inviare i soldi ma non abbastanza
  per inviarli due volte
- Bruteforce sul codice: salt 
- Integer overflow sull'id delle partite: utilizzato un uint256 => 2^256 numero improponibile di partite
  Si potrebbe aggiungere un controllo t.c. ogni ~mln di partite resetta l'id, ragionevole come quantità
  ma spreca gas inutilmente dato che 2^256 chissà se e quando verrà raggiunto

Design choices:
- Stake deciso off-chain, poi trasmesso come messaggio al contratto da entrambi i giocatori.
  Se i due stakes non coincidono, è probabile che uno dei due voglia barare, ma noon sappiamo chi.
  Per evitare queste situazioni, la partita viene chiusa (poco male dato che non era ancora iniziata)...
  Se i due stakes coincidono, vengono inviati. Se i soldi inviati da uno dei due non coincidono con
  quanto dichiarato, il player viene punito
- Punishment: lo stake viene dato all'altro giocatore (o me lo tengo io? :D) 
- id del game salvato off-chain sul client, inviato dal client per ogni operazione. 
  Il contratto fa dei controlli quando riceve una transazione con un dato id.
  Alternative erano mappare address => game, in modo da accedere alla partita di un giocatore
  direttamente tramite l'address, senza controllare l'ID. Ma questa soluzione avrebbe portato 
  a gestire una complessità maggiore in altri casi: uno su tutti, joinGame(ID) richiede di 
  accedere ad un game tramite il suo ID, dunque (data la struttura mapping di solidity) 
  si sarebbe comunque dovuto tenere un mapping id => game.
  Un'altra soluzione sarebbe appunto tenere entrambi i mapping, ma a quel punto un gioco è 
  accessibile tramite ID e il punto di debolezza continua ad esistere.
  Infine, un'ultima soluzione sarebbe quella di usare una struct che wrappa il vettore di games
  e che permette l'accesso al mapping address => game in modo publico e al mapping id => game 
  solo tramite apposite funzioni (ad es. quando si vuole fare una joinGame).
  Tuttavia questa soluzione aggiunge costi e complessità e si è preferito mantenere una struttura
  più semplice.
- security by design and by contract
- Game contract vs Game as struct: l'intero progetto è stato pensato e sviluppato in ottica OOP,
  usando un contratto Game per permettere i benefici della OOP (decoupling, ...), semplificare 
  lo sviluppo e migliorare la mantenibilità del codice. Una volta compreso il costo aggiuntivo di 
  trattare una chiamata indiretta ad un altro contratto, è stato effettuato un refactory che utilizza
  invece una libreria con una struttura dati, lasciando invariato il comportamento del contratto 
  MasterMind che si interfaccia tramite i metodi forniti dalla liberia.
- ^ --- => MasterMind funge il ruolo "centralizzato" di orchestratore di partite, 
  con cui i giocatori si interfacciano nell'invio di dati e soldi. Le informazioni e le operazioni 
  vengono poi delegate al contratto Game corrispondete
- Cheat: revert o punish tentativi di imbroglio? I.e.:
  - un giocatore tenta di modificare l'hash prima del termine della partita 
  - il codemaker sottomette una soluzione che non matcha l'hash inviato inizialmente
  - un giocatore dichiara uno stake e ne vesa un altro
  :
  La mia idea è che questi tentativi vengono annullati tramite una revert: sarebbe oltretutto
  sciocco tentare di barare in questo modo, infatti il sistema rivelerebbe facilmente una combinazione
  diversa (tramite il calcolo dell'hash) e il giocatore andrebbe incontro a punizione sicura.
  L'unico modo che ha il giocatore per barare è facendo leva sui punti che il contratto non verifica:
  dare feedback sbagliati. In questo caso il codemaker deve sperare che il codebreaker non se ne accorga
  altrimenti inizierebbe una disputa che non può vincere.
  Questo, d'altronde, gestisce implicitamente la possibilità che il codemaker sbagli (ad es. il salt)
  NOTA: immagino il capitolo che inizia con "To revert or to punish? That's the question."